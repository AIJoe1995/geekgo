// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"geekgo/week9/webook/internal/events/article"
	"geekgo/week9/webook/internal/repository"
	"geekgo/week9/webook/internal/repository/cache"
	"geekgo/week9/webook/internal/repository/dao"
	"geekgo/week9/webook/internal/service"
	"geekgo/week9/webook/internal/web"
	"geekgo/week9/webook/internal/web/jwt"
	"geekgo/week9/webook/ioc"
)

// Injectors from wire.go:

func InitServer() *App {
	cmdable := ioc.InitRedis()
	handler := jwt.NewRedisJWT(cmdable)
	v := ioc.InitMiddlewares(cmdable, handler)
	db := ioc.InitDB()
	userDAO := dao.NewGORMUserDAO(db)
	userCache := cache.NewRedisUserCache()
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository)
	userHandler := web.NewUserHandler(userService, handler)
	articleDAO := dao.NewGORMArticleDAO(db)
	articleRepository := repository.NewArticleRepository(articleDAO)
	client := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	producer := article.NewKafkaProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, producer)
	interactiveCache := cache.NewRedisInteractiveCache(cmdable)
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	interactiveRepository := repository.NewCachedReadCntRepository(interactiveCache, interactiveDAO)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	articleHandler := web.NewArticleHandler(articleService, interactiveService)
	engine := ioc.InitWebServer(v, userHandler, articleHandler)
	loggerV1 := ioc.InitLogger()
	interactiveReadEventConsumer := article.NewInteractiveReadEventConsumer(client, interactiveRepository, loggerV1)
	v2 := ioc.NewConsumers(interactiveReadEventConsumer)
	app := &App{
		web:       engine,
		consumers: v2,
	}
	return app
}
