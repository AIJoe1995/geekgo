// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Oasis\go\src\geekgo\week6\webook\repository\sms.go
//
// Generated by this command:
//
//	mockgen.exe -source=C:\Users\Oasis\go\src\geekgo\week6\webook\repository\sms.go -destination=C:\Users\Oasis\go\src\geekgo\week6\webook\repository\mocks\sms.mock.go -package=smsrepomocks
//
// Package smsrepomocks is a generated GoMock package.
package smsrepomocks

import (
	context "context"
	reflect "reflect"
	domain "week6/webook/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockSMSRepository is a mock of SMSRepository interface.
type MockSMSRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSMSRepositoryMockRecorder
}

// MockSMSRepositoryMockRecorder is the mock recorder for MockSMSRepository.
type MockSMSRepositoryMockRecorder struct {
	mock *MockSMSRepository
}

// NewMockSMSRepository creates a new mock instance.
func NewMockSMSRepository(ctrl *gomock.Controller) *MockSMSRepository {
	mock := &MockSMSRepository{ctrl: ctrl}
	mock.recorder = &MockSMSRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMSRepository) EXPECT() *MockSMSRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSMSRepository) Add(ctx context.Context, sms domain.SMS) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, sms)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockSMSRepositoryMockRecorder) Add(ctx, sms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSMSRepository)(nil).Add), ctx, sms)
}

// PreemptWaitingSMS mocks base method.
func (m *MockSMSRepository) PreemptWaitingSMS(ctx context.Context) (domain.SMS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreemptWaitingSMS", ctx)
	ret0, _ := ret[0].(domain.SMS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreemptWaitingSMS indicates an expected call of PreemptWaitingSMS.
func (mr *MockSMSRepositoryMockRecorder) PreemptWaitingSMS(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreemptWaitingSMS", reflect.TypeOf((*MockSMSRepository)(nil).PreemptWaitingSMS), ctx)
}

// ReportScheduleResult mocks base method.
func (m *MockSMSRepository) ReportScheduleResult(ctx context.Context, id int64, success bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportScheduleResult", ctx, id, success)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportScheduleResult indicates an expected call of ReportScheduleResult.
func (mr *MockSMSRepositoryMockRecorder) ReportScheduleResult(ctx, id, success any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportScheduleResult", reflect.TypeOf((*MockSMSRepository)(nil).ReportScheduleResult), ctx, id, success)
}
